/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 67293.0, "series": [{"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 2.0], [1.1, 2.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 98.0], [2.1, 98.0], [2.2, 98.0], [2.3, 98.0], [2.4, 98.0], [2.5, 98.0], [2.6, 98.0], [2.7, 98.0], [2.8, 98.0], [2.9, 98.0], [3.0, 2100.0], [3.1, 2100.0], [3.2, 2100.0], [3.3, 2100.0], [3.4, 2100.0], [3.5, 2100.0], [3.6, 2100.0], [3.7, 2100.0], [3.8, 2100.0], [3.9, 2100.0], [4.0, 2352.0], [4.1, 2352.0], [4.2, 2352.0], [4.3, 2352.0], [4.4, 2352.0], [4.5, 2352.0], [4.6, 2352.0], [4.7, 2352.0], [4.8, 2352.0], [4.9, 2352.0], [5.0, 2411.0], [5.1, 2411.0], [5.2, 2411.0], [5.3, 2411.0], [5.4, 2411.0], [5.5, 2411.0], [5.6, 2411.0], [5.7, 2411.0], [5.8, 2411.0], [5.9, 2411.0], [6.0, 2749.0], [6.1, 2749.0], [6.2, 2749.0], [6.3, 2749.0], [6.4, 2749.0], [6.5, 2749.0], [6.6, 2749.0], [6.7, 2749.0], [6.8, 2749.0], [6.9, 2749.0], [7.0, 2852.0], [7.1, 2852.0], [7.2, 2852.0], [7.3, 2852.0], [7.4, 2852.0], [7.5, 2852.0], [7.6, 2852.0], [7.7, 2852.0], [7.8, 2852.0], [7.9, 2852.0], [8.0, 3113.0], [8.1, 3113.0], [8.2, 3113.0], [8.3, 3113.0], [8.4, 3113.0], [8.5, 3113.0], [8.6, 3113.0], [8.7, 3113.0], [8.8, 3113.0], [8.9, 3113.0], [9.0, 3276.0], [9.1, 3276.0], [9.2, 3276.0], [9.3, 3276.0], [9.4, 3276.0], [9.5, 3276.0], [9.6, 3276.0], [9.7, 3276.0], [9.8, 3276.0], [9.9, 3276.0], [10.0, 3787.0], [10.1, 3787.0], [10.2, 3787.0], [10.3, 3787.0], [10.4, 3787.0], [10.5, 3787.0], [10.6, 3787.0], [10.7, 3787.0], [10.8, 3787.0], [10.9, 3787.0], [11.0, 3971.0], [11.1, 3971.0], [11.2, 3971.0], [11.3, 3971.0], [11.4, 3971.0], [11.5, 3971.0], [11.6, 3971.0], [11.7, 3971.0], [11.8, 3971.0], [11.9, 3971.0], [12.0, 4048.0], [12.1, 4048.0], [12.2, 4048.0], [12.3, 4048.0], [12.4, 4048.0], [12.5, 4048.0], [12.6, 4048.0], [12.7, 4048.0], [12.8, 4048.0], [12.9, 4048.0], [13.0, 4211.0], [13.1, 4211.0], [13.2, 4211.0], [13.3, 4211.0], [13.4, 4211.0], [13.5, 4211.0], [13.6, 4211.0], [13.7, 4211.0], [13.8, 4211.0], [13.9, 4211.0], [14.0, 4593.0], [14.1, 4593.0], [14.2, 4593.0], [14.3, 4593.0], [14.4, 4593.0], [14.5, 4593.0], [14.6, 4593.0], [14.7, 4593.0], [14.8, 4593.0], [14.9, 4593.0], [15.0, 4610.0], [15.1, 4610.0], [15.2, 4610.0], [15.3, 4610.0], [15.4, 4610.0], [15.5, 4610.0], [15.6, 4610.0], [15.7, 4610.0], [15.8, 4610.0], [15.9, 4610.0], [16.0, 4691.0], [16.1, 4691.0], [16.2, 4691.0], [16.3, 4691.0], [16.4, 4691.0], [16.5, 4691.0], [16.6, 4691.0], [16.7, 4691.0], [16.8, 4691.0], [16.9, 4691.0], [17.0, 4794.0], [17.1, 4794.0], [17.2, 4794.0], [17.3, 4794.0], [17.4, 4794.0], [17.5, 4794.0], [17.6, 4794.0], [17.7, 4794.0], [17.8, 4794.0], [17.9, 4794.0], [18.0, 4888.0], [18.1, 4888.0], [18.2, 4888.0], [18.3, 4888.0], [18.4, 4888.0], [18.5, 4888.0], [18.6, 4888.0], [18.7, 4888.0], [18.8, 4888.0], [18.9, 4888.0], [19.0, 5154.0], [19.1, 5154.0], [19.2, 5154.0], [19.3, 5154.0], [19.4, 5154.0], [19.5, 5154.0], [19.6, 5154.0], [19.7, 5154.0], [19.8, 5154.0], [19.9, 5154.0], [20.0, 6138.0], [20.1, 6138.0], [20.2, 6138.0], [20.3, 6138.0], [20.4, 6138.0], [20.5, 6138.0], [20.6, 6138.0], [20.7, 6138.0], [20.8, 6138.0], [20.9, 6138.0], [21.0, 6396.0], [21.1, 6396.0], [21.2, 6396.0], [21.3, 6396.0], [21.4, 6396.0], [21.5, 6396.0], [21.6, 6396.0], [21.7, 6396.0], [21.8, 6396.0], [21.9, 6396.0], [22.0, 6643.0], [22.1, 6643.0], [22.2, 6643.0], [22.3, 6643.0], [22.4, 6643.0], [22.5, 6643.0], [22.6, 6643.0], [22.7, 6643.0], [22.8, 6643.0], [22.9, 6643.0], [23.0, 6674.0], [23.1, 6674.0], [23.2, 6674.0], [23.3, 6674.0], [23.4, 6674.0], [23.5, 6674.0], [23.6, 6674.0], [23.7, 6674.0], [23.8, 6674.0], [23.9, 6674.0], [24.0, 6790.0], [24.1, 6790.0], [24.2, 6790.0], [24.3, 6790.0], [24.4, 6790.0], [24.5, 6790.0], [24.6, 6790.0], [24.7, 6790.0], [24.8, 6790.0], [24.9, 6790.0], [25.0, 6839.0], [25.1, 6839.0], [25.2, 6839.0], [25.3, 6839.0], [25.4, 6839.0], [25.5, 6839.0], [25.6, 6839.0], [25.7, 6839.0], [25.8, 6839.0], [25.9, 6839.0], [26.0, 6892.0], [26.1, 6892.0], [26.2, 6892.0], [26.3, 6892.0], [26.4, 6892.0], [26.5, 6892.0], [26.6, 6892.0], [26.7, 6892.0], [26.8, 6892.0], [26.9, 6892.0], [27.0, 6903.0], [27.1, 6903.0], [27.2, 6903.0], [27.3, 6903.0], [27.4, 6903.0], [27.5, 6903.0], [27.6, 6903.0], [27.7, 6903.0], [27.8, 6903.0], [27.9, 6903.0], [28.0, 7274.0], [28.1, 7274.0], [28.2, 7274.0], [28.3, 7274.0], [28.4, 7274.0], [28.5, 7274.0], [28.6, 7274.0], [28.7, 7274.0], [28.8, 7274.0], [28.9, 7274.0], [29.0, 7290.0], [29.1, 7290.0], [29.2, 7290.0], [29.3, 7290.0], [29.4, 7290.0], [29.5, 7290.0], [29.6, 7290.0], [29.7, 7290.0], [29.8, 7290.0], [29.9, 7290.0], [30.0, 7523.0], [30.1, 7523.0], [30.2, 7523.0], [30.3, 7523.0], [30.4, 7523.0], [30.5, 7523.0], [30.6, 7523.0], [30.7, 7523.0], [30.8, 7523.0], [30.9, 7523.0], [31.0, 7657.0], [31.1, 7657.0], [31.2, 7657.0], [31.3, 7657.0], [31.4, 7657.0], [31.5, 7657.0], [31.6, 7657.0], [31.7, 7657.0], [31.8, 7657.0], [31.9, 7657.0], [32.0, 7792.0], [32.1, 7792.0], [32.2, 7792.0], [32.3, 7792.0], [32.4, 7792.0], [32.5, 7792.0], [32.6, 7792.0], [32.7, 7792.0], [32.8, 7792.0], [32.9, 7792.0], [33.0, 8363.0], [33.1, 8363.0], [33.2, 8363.0], [33.3, 8363.0], [33.4, 8363.0], [33.5, 8363.0], [33.6, 8363.0], [33.7, 8363.0], [33.8, 8363.0], [33.9, 8363.0], [34.0, 8591.0], [34.1, 8591.0], [34.2, 8591.0], [34.3, 8591.0], [34.4, 8591.0], [34.5, 8591.0], [34.6, 8591.0], [34.7, 8591.0], [34.8, 8591.0], [34.9, 8591.0], [35.0, 8747.0], [35.1, 8747.0], [35.2, 8747.0], [35.3, 8747.0], [35.4, 8747.0], [35.5, 8747.0], [35.6, 8747.0], [35.7, 8747.0], [35.8, 8747.0], [35.9, 8747.0], [36.0, 8857.0], [36.1, 8857.0], [36.2, 8857.0], [36.3, 8857.0], [36.4, 8857.0], [36.5, 8857.0], [36.6, 8857.0], [36.7, 8857.0], [36.8, 8857.0], [36.9, 8857.0], [37.0, 8954.0], [37.1, 8954.0], [37.2, 8954.0], [37.3, 8954.0], [37.4, 8954.0], [37.5, 8954.0], [37.6, 8954.0], [37.7, 8954.0], [37.8, 8954.0], [37.9, 8954.0], [38.0, 9072.0], [38.1, 9072.0], [38.2, 9072.0], [38.3, 9072.0], [38.4, 9072.0], [38.5, 9072.0], [38.6, 9072.0], [38.7, 9072.0], [38.8, 9072.0], [38.9, 9072.0], [39.0, 9219.0], [39.1, 9219.0], [39.2, 9219.0], [39.3, 9219.0], [39.4, 9219.0], [39.5, 9219.0], [39.6, 9219.0], [39.7, 9219.0], [39.8, 9219.0], [39.9, 9219.0], [40.0, 9365.0], [40.1, 9365.0], [40.2, 9365.0], [40.3, 9365.0], [40.4, 9365.0], [40.5, 9365.0], [40.6, 9365.0], [40.7, 9365.0], [40.8, 9365.0], [40.9, 9365.0], [41.0, 9871.0], [41.1, 9871.0], [41.2, 9871.0], [41.3, 9871.0], [41.4, 9871.0], [41.5, 9871.0], [41.6, 9871.0], [41.7, 9871.0], [41.8, 9871.0], [41.9, 9871.0], [42.0, 10037.0], [42.1, 10037.0], [42.2, 10037.0], [42.3, 10037.0], [42.4, 10037.0], [42.5, 10037.0], [42.6, 10037.0], [42.7, 10037.0], [42.8, 10037.0], [42.9, 10037.0], [43.0, 11130.0], [43.1, 11130.0], [43.2, 11130.0], [43.3, 11130.0], [43.4, 11130.0], [43.5, 11130.0], [43.6, 11130.0], [43.7, 11130.0], [43.8, 11130.0], [43.9, 11130.0], [44.0, 11194.0], [44.1, 11194.0], [44.2, 11194.0], [44.3, 11194.0], [44.4, 11194.0], [44.5, 11194.0], [44.6, 11194.0], [44.7, 11194.0], [44.8, 11194.0], [44.9, 11194.0], [45.0, 11283.0], [45.1, 11283.0], [45.2, 11283.0], [45.3, 11283.0], [45.4, 11283.0], [45.5, 11283.0], [45.6, 11283.0], [45.7, 11283.0], [45.8, 11283.0], [45.9, 11283.0], [46.0, 11284.0], [46.1, 11284.0], [46.2, 11284.0], [46.3, 11284.0], [46.4, 11284.0], [46.5, 11284.0], [46.6, 11284.0], [46.7, 11284.0], [46.8, 11284.0], [46.9, 11284.0], [47.0, 11430.0], [47.1, 11430.0], [47.2, 11430.0], [47.3, 11430.0], [47.4, 11430.0], [47.5, 11430.0], [47.6, 11430.0], [47.7, 11430.0], [47.8, 11430.0], [47.9, 11430.0], [48.0, 11818.0], [48.1, 11818.0], [48.2, 11818.0], [48.3, 11818.0], [48.4, 11818.0], [48.5, 11818.0], [48.6, 11818.0], [48.7, 11818.0], [48.8, 11818.0], [48.9, 11818.0], [49.0, 12085.0], [49.1, 12085.0], [49.2, 12085.0], [49.3, 12085.0], [49.4, 12085.0], [49.5, 12085.0], [49.6, 12085.0], [49.7, 12085.0], [49.8, 12085.0], [49.9, 12085.0], [50.0, 12168.0], [50.1, 12168.0], [50.2, 12168.0], [50.3, 12168.0], [50.4, 12168.0], [50.5, 12168.0], [50.6, 12168.0], [50.7, 12168.0], [50.8, 12168.0], [50.9, 12168.0], [51.0, 12952.0], [51.1, 12952.0], [51.2, 12952.0], [51.3, 12952.0], [51.4, 12952.0], [51.5, 12952.0], [51.6, 12952.0], [51.7, 12952.0], [51.8, 12952.0], [51.9, 12952.0], [52.0, 13553.0], [52.1, 13553.0], [52.2, 13553.0], [52.3, 13553.0], [52.4, 13553.0], [52.5, 13553.0], [52.6, 13553.0], [52.7, 13553.0], [52.8, 13553.0], [52.9, 13553.0], [53.0, 13573.0], [53.1, 13573.0], [53.2, 13573.0], [53.3, 13573.0], [53.4, 13573.0], [53.5, 13573.0], [53.6, 13573.0], [53.7, 13573.0], [53.8, 13573.0], [53.9, 13573.0], [54.0, 13840.0], [54.1, 13840.0], [54.2, 13840.0], [54.3, 13840.0], [54.4, 13840.0], [54.5, 13840.0], [54.6, 13840.0], [54.7, 13840.0], [54.8, 13840.0], [54.9, 13840.0], [55.0, 13973.0], [55.1, 13973.0], [55.2, 13973.0], [55.3, 13973.0], [55.4, 13973.0], [55.5, 13973.0], [55.6, 13973.0], [55.7, 13973.0], [55.8, 13973.0], [55.9, 13973.0], [56.0, 14199.0], [56.1, 14199.0], [56.2, 14199.0], [56.3, 14199.0], [56.4, 14199.0], [56.5, 14199.0], [56.6, 14199.0], [56.7, 14199.0], [56.8, 14199.0], [56.9, 14199.0], [57.0, 14277.0], [57.1, 14277.0], [57.2, 14277.0], [57.3, 14277.0], [57.4, 14277.0], [57.5, 14277.0], [57.6, 14277.0], [57.7, 14277.0], [57.8, 14277.0], [57.9, 14277.0], [58.0, 14380.0], [58.1, 14380.0], [58.2, 14380.0], [58.3, 14380.0], [58.4, 14380.0], [58.5, 14380.0], [58.6, 14380.0], [58.7, 14380.0], [58.8, 14380.0], [58.9, 14380.0], [59.0, 14546.0], [59.1, 14546.0], [59.2, 14546.0], [59.3, 14546.0], [59.4, 14546.0], [59.5, 14546.0], [59.6, 14546.0], [59.7, 14546.0], [59.8, 14546.0], [59.9, 14546.0], [60.0, 14594.0], [60.1, 14594.0], [60.2, 14594.0], [60.3, 14594.0], [60.4, 14594.0], [60.5, 14594.0], [60.6, 14594.0], [60.7, 14594.0], [60.8, 14594.0], [60.9, 14594.0], [61.0, 14675.0], [61.1, 14675.0], [61.2, 14675.0], [61.3, 14675.0], [61.4, 14675.0], [61.5, 14675.0], [61.6, 14675.0], [61.7, 14675.0], [61.8, 14675.0], [61.9, 14675.0], [62.0, 15823.0], [62.1, 15823.0], [62.2, 15823.0], [62.3, 15823.0], [62.4, 15823.0], [62.5, 15823.0], [62.6, 15823.0], [62.7, 15823.0], [62.8, 15823.0], [62.9, 15823.0], [63.0, 15846.0], [63.1, 15846.0], [63.2, 15846.0], [63.3, 15846.0], [63.4, 15846.0], [63.5, 15846.0], [63.6, 15846.0], [63.7, 15846.0], [63.8, 15846.0], [63.9, 15846.0], [64.0, 16089.0], [64.1, 16089.0], [64.2, 16089.0], [64.3, 16089.0], [64.4, 16089.0], [64.5, 16089.0], [64.6, 16089.0], [64.7, 16089.0], [64.8, 16089.0], [64.9, 16089.0], [65.0, 16340.0], [65.1, 16340.0], [65.2, 16340.0], [65.3, 16340.0], [65.4, 16340.0], [65.5, 16340.0], [65.6, 16340.0], [65.7, 16340.0], [65.8, 16340.0], [65.9, 16340.0], [66.0, 16431.0], [66.1, 16431.0], [66.2, 16431.0], [66.3, 16431.0], [66.4, 16431.0], [66.5, 16431.0], [66.6, 16431.0], [66.7, 16431.0], [66.8, 16431.0], [66.9, 16431.0], [67.0, 16867.0], [67.1, 16867.0], [67.2, 16867.0], [67.3, 16867.0], [67.4, 16867.0], [67.5, 16867.0], [67.6, 16867.0], [67.7, 16867.0], [67.8, 16867.0], [67.9, 16867.0], [68.0, 16937.0], [68.1, 16937.0], [68.2, 16937.0], [68.3, 16937.0], [68.4, 16937.0], [68.5, 16937.0], [68.6, 16937.0], [68.7, 16937.0], [68.8, 16937.0], [68.9, 16937.0], [69.0, 17350.0], [69.1, 17350.0], [69.2, 17350.0], [69.3, 17350.0], [69.4, 17350.0], [69.5, 17350.0], [69.6, 17350.0], [69.7, 17350.0], [69.8, 17350.0], [69.9, 17350.0], [70.0, 17626.0], [70.1, 17626.0], [70.2, 17626.0], [70.3, 17626.0], [70.4, 17626.0], [70.5, 17626.0], [70.6, 17626.0], [70.7, 17626.0], [70.8, 17626.0], [70.9, 17626.0], [71.0, 17627.0], [71.1, 17627.0], [71.2, 17627.0], [71.3, 17627.0], [71.4, 17627.0], [71.5, 17627.0], [71.6, 17627.0], [71.7, 17627.0], [71.8, 17627.0], [71.9, 17627.0], [72.0, 18934.0], [72.1, 18934.0], [72.2, 18934.0], [72.3, 18934.0], [72.4, 18934.0], [72.5, 18934.0], [72.6, 18934.0], [72.7, 18934.0], [72.8, 18934.0], [72.9, 18934.0], [73.0, 19209.0], [73.1, 19209.0], [73.2, 19209.0], [73.3, 19209.0], [73.4, 19209.0], [73.5, 19209.0], [73.6, 19209.0], [73.7, 19209.0], [73.8, 19209.0], [73.9, 19209.0], [74.0, 19325.0], [74.1, 19325.0], [74.2, 19325.0], [74.3, 19325.0], [74.4, 19325.0], [74.5, 19325.0], [74.6, 19325.0], [74.7, 19325.0], [74.8, 19325.0], [74.9, 19325.0], [75.0, 19836.0], [75.1, 19836.0], [75.2, 19836.0], [75.3, 19836.0], [75.4, 19836.0], [75.5, 19836.0], [75.6, 19836.0], [75.7, 19836.0], [75.8, 19836.0], [75.9, 19836.0], [76.0, 20045.0], [76.1, 20045.0], [76.2, 20045.0], [76.3, 20045.0], [76.4, 20045.0], [76.5, 20045.0], [76.6, 20045.0], [76.7, 20045.0], [76.8, 20045.0], [76.9, 20045.0], [77.0, 20111.0], [77.1, 20111.0], [77.2, 20111.0], [77.3, 20111.0], [77.4, 20111.0], [77.5, 20111.0], [77.6, 20111.0], [77.7, 20111.0], [77.8, 20111.0], [77.9, 20111.0], [78.0, 20325.0], [78.1, 20325.0], [78.2, 20325.0], [78.3, 20325.0], [78.4, 20325.0], [78.5, 20325.0], [78.6, 20325.0], [78.7, 20325.0], [78.8, 20325.0], [78.9, 20325.0], [79.0, 20546.0], [79.1, 20546.0], [79.2, 20546.0], [79.3, 20546.0], [79.4, 20546.0], [79.5, 20546.0], [79.6, 20546.0], [79.7, 20546.0], [79.8, 20546.0], [79.9, 20546.0], [80.0, 21498.0], [80.1, 21498.0], [80.2, 21498.0], [80.3, 21498.0], [80.4, 21498.0], [80.5, 21498.0], [80.6, 21498.0], [80.7, 21498.0], [80.8, 21498.0], [80.9, 21498.0], [81.0, 22066.0], [81.1, 22066.0], [81.2, 22066.0], [81.3, 22066.0], [81.4, 22066.0], [81.5, 22066.0], [81.6, 22066.0], [81.7, 22066.0], [81.8, 22066.0], [81.9, 22066.0], [82.0, 22440.0], [82.1, 22440.0], [82.2, 22440.0], [82.3, 22440.0], [82.4, 22440.0], [82.5, 22440.0], [82.6, 22440.0], [82.7, 22440.0], [82.8, 22440.0], [82.9, 22440.0], [83.0, 22686.0], [83.1, 22686.0], [83.2, 22686.0], [83.3, 22686.0], [83.4, 22686.0], [83.5, 22686.0], [83.6, 22686.0], [83.7, 22686.0], [83.8, 22686.0], [83.9, 22686.0], [84.0, 22833.0], [84.1, 22833.0], [84.2, 22833.0], [84.3, 22833.0], [84.4, 22833.0], [84.5, 22833.0], [84.6, 22833.0], [84.7, 22833.0], [84.8, 22833.0], [84.9, 22833.0], [85.0, 23004.0], [85.1, 23004.0], [85.2, 23004.0], [85.3, 23004.0], [85.4, 23004.0], [85.5, 23004.0], [85.6, 23004.0], [85.7, 23004.0], [85.8, 23004.0], [85.9, 23004.0], [86.0, 24686.0], [86.1, 24686.0], [86.2, 24686.0], [86.3, 24686.0], [86.4, 24686.0], [86.5, 24686.0], [86.6, 24686.0], [86.7, 24686.0], [86.8, 24686.0], [86.9, 24686.0], [87.0, 24889.0], [87.1, 24889.0], [87.2, 24889.0], [87.3, 24889.0], [87.4, 24889.0], [87.5, 24889.0], [87.6, 24889.0], [87.7, 24889.0], [87.8, 24889.0], [87.9, 24889.0], [88.0, 26164.0], [88.1, 26164.0], [88.2, 26164.0], [88.3, 26164.0], [88.4, 26164.0], [88.5, 26164.0], [88.6, 26164.0], [88.7, 26164.0], [88.8, 26164.0], [88.9, 26164.0], [89.0, 32448.0], [89.1, 32448.0], [89.2, 32448.0], [89.3, 32448.0], [89.4, 32448.0], [89.5, 32448.0], [89.6, 32448.0], [89.7, 32448.0], [89.8, 32448.0], [89.9, 32448.0], [90.0, 32962.0], [90.1, 32962.0], [90.2, 32962.0], [90.3, 32962.0], [90.4, 32962.0], [90.5, 32962.0], [90.6, 32962.0], [90.7, 32962.0], [90.8, 32962.0], [90.9, 32962.0], [91.0, 33994.0], [91.1, 33994.0], [91.2, 33994.0], [91.3, 33994.0], [91.4, 33994.0], [91.5, 33994.0], [91.6, 33994.0], [91.7, 33994.0], [91.8, 33994.0], [91.9, 33994.0], [92.0, 40050.0], [92.1, 40050.0], [92.2, 40050.0], [92.3, 40050.0], [92.4, 40050.0], [92.5, 40050.0], [92.6, 40050.0], [92.7, 40050.0], [92.8, 40050.0], [92.9, 40050.0], [93.0, 44216.0], [93.1, 44216.0], [93.2, 44216.0], [93.3, 44216.0], [93.4, 44216.0], [93.5, 44216.0], [93.6, 44216.0], [93.7, 44216.0], [93.8, 44216.0], [93.9, 44216.0], [94.0, 45443.0], [94.1, 45443.0], [94.2, 45443.0], [94.3, 45443.0], [94.4, 45443.0], [94.5, 45443.0], [94.6, 45443.0], [94.7, 45443.0], [94.8, 45443.0], [94.9, 45443.0], [95.0, 46626.0], [95.1, 46626.0], [95.2, 46626.0], [95.3, 46626.0], [95.4, 46626.0], [95.5, 46626.0], [95.6, 46626.0], [95.7, 46626.0], [95.8, 46626.0], [95.9, 46626.0], [96.0, 48081.0], [96.1, 48081.0], [96.2, 48081.0], [96.3, 48081.0], [96.4, 48081.0], [96.5, 48081.0], [96.6, 48081.0], [96.7, 48081.0], [96.8, 48081.0], [96.9, 48081.0], [97.0, 60578.0], [97.1, 60578.0], [97.2, 60578.0], [97.3, 60578.0], [97.4, 60578.0], [97.5, 60578.0], [97.6, 60578.0], [97.7, 60578.0], [97.8, 60578.0], [97.9, 60578.0], [98.0, 61948.0], [98.1, 61948.0], [98.2, 61948.0], [98.3, 61948.0], [98.4, 61948.0], [98.5, 61948.0], [98.6, 61948.0], [98.7, 61948.0], [98.8, 61948.0], [98.9, 61948.0], [99.0, 65659.0], [99.1, 65659.0], [99.2, 65659.0], [99.3, 65659.0], [99.4, 65659.0], [99.5, 65659.0], [99.6, 65659.0], [99.7, 65659.0], [99.8, 65659.0], [99.9, 65659.0]], "isOverall": false, "label": "homePageHttpRequest", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 3.0], [1.1, 3.0], [1.2, 3.0], [1.3, 3.0], [1.4, 3.0], [1.5, 3.0], [1.6, 3.0], [1.7, 3.0], [1.8, 3.0], [1.9, 3.0], [2.0, 768.0], [2.1, 768.0], [2.2, 768.0], [2.3, 768.0], [2.4, 768.0], [2.5, 768.0], [2.6, 768.0], [2.7, 768.0], [2.8, 768.0], [2.9, 768.0], [3.0, 1084.0], [3.1, 1084.0], [3.2, 1084.0], [3.3, 1084.0], [3.4, 1084.0], [3.5, 1084.0], [3.6, 1084.0], [3.7, 1084.0], [3.8, 1084.0], [3.9, 1084.0], [4.0, 1737.0], [4.1, 1737.0], [4.2, 1737.0], [4.3, 1737.0], [4.4, 1737.0], [4.5, 1737.0], [4.6, 1737.0], [4.7, 1737.0], [4.8, 1737.0], [4.9, 1737.0], [5.0, 2020.0], [5.1, 2020.0], [5.2, 2020.0], [5.3, 2020.0], [5.4, 2020.0], [5.5, 2020.0], [5.6, 2020.0], [5.7, 2020.0], [5.8, 2020.0], [5.9, 2020.0], [6.0, 2473.0], [6.1, 2473.0], [6.2, 2473.0], [6.3, 2473.0], [6.4, 2473.0], [6.5, 2473.0], [6.6, 2473.0], [6.7, 2473.0], [6.8, 2473.0], [6.9, 2473.0], [7.0, 2515.0], [7.1, 2515.0], [7.2, 2515.0], [7.3, 2515.0], [7.4, 2515.0], [7.5, 2515.0], [7.6, 2515.0], [7.7, 2515.0], [7.8, 2515.0], [7.9, 2515.0], [8.0, 2535.0], [8.1, 2535.0], [8.2, 2535.0], [8.3, 2535.0], [8.4, 2535.0], [8.5, 2535.0], [8.6, 2535.0], [8.7, 2535.0], [8.8, 2535.0], [8.9, 2535.0], [9.0, 2608.0], [9.1, 2608.0], [9.2, 2608.0], [9.3, 2608.0], [9.4, 2608.0], [9.5, 2608.0], [9.6, 2608.0], [9.7, 2608.0], [9.8, 2608.0], [9.9, 2608.0], [10.0, 2715.0], [10.1, 2715.0], [10.2, 2715.0], [10.3, 2715.0], [10.4, 2715.0], [10.5, 2715.0], [10.6, 2715.0], [10.7, 2715.0], [10.8, 2715.0], [10.9, 2715.0], [11.0, 2728.0], [11.1, 2728.0], [11.2, 2728.0], [11.3, 2728.0], [11.4, 2728.0], [11.5, 2728.0], [11.6, 2728.0], [11.7, 2728.0], [11.8, 2728.0], [11.9, 2728.0], [12.0, 2925.0], [12.1, 2925.0], [12.2, 2925.0], [12.3, 2925.0], [12.4, 2925.0], [12.5, 2925.0], [12.6, 2925.0], [12.7, 2925.0], [12.8, 2925.0], [12.9, 2925.0], [13.0, 3361.0], [13.1, 3361.0], [13.2, 3361.0], [13.3, 3361.0], [13.4, 3361.0], [13.5, 3361.0], [13.6, 3361.0], [13.7, 3361.0], [13.8, 3361.0], [13.9, 3361.0], [14.0, 3583.0], [14.1, 3583.0], [14.2, 3583.0], [14.3, 3583.0], [14.4, 3583.0], [14.5, 3583.0], [14.6, 3583.0], [14.7, 3583.0], [14.8, 3583.0], [14.9, 3583.0], [15.0, 3584.0], [15.1, 3584.0], [15.2, 3584.0], [15.3, 3584.0], [15.4, 3584.0], [15.5, 3584.0], [15.6, 3584.0], [15.7, 3584.0], [15.8, 3584.0], [15.9, 3584.0], [16.0, 3909.0], [16.1, 3909.0], [16.2, 3909.0], [16.3, 3909.0], [16.4, 3909.0], [16.5, 3909.0], [16.6, 3909.0], [16.7, 3909.0], [16.8, 3909.0], [16.9, 3909.0], [17.0, 3964.0], [17.1, 3964.0], [17.2, 3964.0], [17.3, 3964.0], [17.4, 3964.0], [17.5, 3964.0], [17.6, 3964.0], [17.7, 3964.0], [17.8, 3964.0], [17.9, 3964.0], [18.0, 4013.0], [18.1, 4013.0], [18.2, 4013.0], [18.3, 4013.0], [18.4, 4013.0], [18.5, 4013.0], [18.6, 4013.0], [18.7, 4013.0], [18.8, 4013.0], [18.9, 4013.0], [19.0, 4142.0], [19.1, 4142.0], [19.2, 4142.0], [19.3, 4142.0], [19.4, 4142.0], [19.5, 4142.0], [19.6, 4142.0], [19.7, 4142.0], [19.8, 4142.0], [19.9, 4142.0], [20.0, 4438.0], [20.1, 4438.0], [20.2, 4438.0], [20.3, 4438.0], [20.4, 4438.0], [20.5, 4438.0], [20.6, 4438.0], [20.7, 4438.0], [20.8, 4438.0], [20.9, 4438.0], [21.0, 4632.0], [21.1, 4632.0], [21.2, 4632.0], [21.3, 4632.0], [21.4, 4632.0], [21.5, 4632.0], [21.6, 4632.0], [21.7, 4632.0], [21.8, 4632.0], [21.9, 4632.0], [22.0, 5209.0], [22.1, 5209.0], [22.2, 5209.0], [22.3, 5209.0], [22.4, 5209.0], [22.5, 5209.0], [22.6, 5209.0], [22.7, 5209.0], [22.8, 5209.0], [22.9, 5209.0], [23.0, 5291.0], [23.1, 5291.0], [23.2, 5291.0], [23.3, 5291.0], [23.4, 5291.0], [23.5, 5291.0], [23.6, 5291.0], [23.7, 5291.0], [23.8, 5291.0], [23.9, 5291.0], [24.0, 5305.0], [24.1, 5305.0], [24.2, 5305.0], [24.3, 5305.0], [24.4, 5305.0], [24.5, 5305.0], [24.6, 5305.0], [24.7, 5305.0], [24.8, 5305.0], [24.9, 5305.0], [25.0, 5450.0], [25.1, 5450.0], [25.2, 5450.0], [25.3, 5450.0], [25.4, 5450.0], [25.5, 5450.0], [25.6, 5450.0], [25.7, 5450.0], [25.8, 5450.0], [25.9, 5450.0], [26.0, 6712.0], [26.1, 6712.0], [26.2, 6712.0], [26.3, 6712.0], [26.4, 6712.0], [26.5, 6712.0], [26.6, 6712.0], [26.7, 6712.0], [26.8, 6712.0], [26.9, 6712.0], [27.0, 6782.0], [27.1, 6782.0], [27.2, 6782.0], [27.3, 6782.0], [27.4, 6782.0], [27.5, 6782.0], [27.6, 6782.0], [27.7, 6782.0], [27.8, 6782.0], [27.9, 6782.0], [28.0, 8076.0], [28.1, 8076.0], [28.2, 8076.0], [28.3, 8076.0], [28.4, 8076.0], [28.5, 8076.0], [28.6, 8076.0], [28.7, 8076.0], [28.8, 8076.0], [28.9, 8076.0], [29.0, 8080.0], [29.1, 8080.0], [29.2, 8080.0], [29.3, 8080.0], [29.4, 8080.0], [29.5, 8080.0], [29.6, 8080.0], [29.7, 8080.0], [29.8, 8080.0], [29.9, 8080.0], [30.0, 8158.0], [30.1, 8158.0], [30.2, 8158.0], [30.3, 8158.0], [30.4, 8158.0], [30.5, 8158.0], [30.6, 8158.0], [30.7, 8158.0], [30.8, 8158.0], [30.9, 8158.0], [31.0, 8475.0], [31.1, 8475.0], [31.2, 8475.0], [31.3, 8475.0], [31.4, 8475.0], [31.5, 8475.0], [31.6, 8475.0], [31.7, 8475.0], [31.8, 8475.0], [31.9, 8475.0], [32.0, 9209.0], [32.1, 9209.0], [32.2, 9209.0], [32.3, 9209.0], [32.4, 9209.0], [32.5, 9209.0], [32.6, 9209.0], [32.7, 9209.0], [32.8, 9209.0], [32.9, 9209.0], [33.0, 9233.0], [33.1, 9233.0], [33.2, 9233.0], [33.3, 9233.0], [33.4, 9233.0], [33.5, 9233.0], [33.6, 9233.0], [33.7, 9233.0], [33.8, 9233.0], [33.9, 9233.0], [34.0, 9595.0], [34.1, 9595.0], [34.2, 9595.0], [34.3, 9595.0], [34.4, 9595.0], [34.5, 9595.0], [34.6, 9595.0], [34.7, 9595.0], [34.8, 9595.0], [34.9, 9595.0], [35.0, 10120.0], [35.1, 10120.0], [35.2, 10120.0], [35.3, 10120.0], [35.4, 10120.0], [35.5, 10120.0], [35.6, 10120.0], [35.7, 10120.0], [35.8, 10120.0], [35.9, 10120.0], [36.0, 10263.0], [36.1, 10263.0], [36.2, 10263.0], [36.3, 10263.0], [36.4, 10263.0], [36.5, 10263.0], [36.6, 10263.0], [36.7, 10263.0], [36.8, 10263.0], [36.9, 10263.0], [37.0, 10275.0], [37.1, 10275.0], [37.2, 10275.0], [37.3, 10275.0], [37.4, 10275.0], [37.5, 10275.0], [37.6, 10275.0], [37.7, 10275.0], [37.8, 10275.0], [37.9, 10275.0], [38.0, 10466.0], [38.1, 10466.0], [38.2, 10466.0], [38.3, 10466.0], [38.4, 10466.0], [38.5, 10466.0], [38.6, 10466.0], [38.7, 10466.0], [38.8, 10466.0], [38.9, 10466.0], [39.0, 10712.0], [39.1, 10712.0], [39.2, 10712.0], [39.3, 10712.0], [39.4, 10712.0], [39.5, 10712.0], [39.6, 10712.0], [39.7, 10712.0], [39.8, 10712.0], [39.9, 10712.0], [40.0, 10874.0], [40.1, 10874.0], [40.2, 10874.0], [40.3, 10874.0], [40.4, 10874.0], [40.5, 10874.0], [40.6, 10874.0], [40.7, 10874.0], [40.8, 10874.0], [40.9, 10874.0], [41.0, 11061.0], [41.1, 11061.0], [41.2, 11061.0], [41.3, 11061.0], [41.4, 11061.0], [41.5, 11061.0], [41.6, 11061.0], [41.7, 11061.0], [41.8, 11061.0], [41.9, 11061.0], [42.0, 12751.0], [42.1, 12751.0], [42.2, 12751.0], [42.3, 12751.0], [42.4, 12751.0], [42.5, 12751.0], [42.6, 12751.0], [42.7, 12751.0], [42.8, 12751.0], [42.9, 12751.0], [43.0, 12976.0], [43.1, 12976.0], [43.2, 12976.0], [43.3, 12976.0], [43.4, 12976.0], [43.5, 12976.0], [43.6, 12976.0], [43.7, 12976.0], [43.8, 12976.0], [43.9, 12976.0], [44.0, 13072.0], [44.1, 13072.0], [44.2, 13072.0], [44.3, 13072.0], [44.4, 13072.0], [44.5, 13072.0], [44.6, 13072.0], [44.7, 13072.0], [44.8, 13072.0], [44.9, 13072.0], [45.0, 13103.0], [45.1, 13103.0], [45.2, 13103.0], [45.3, 13103.0], [45.4, 13103.0], [45.5, 13103.0], [45.6, 13103.0], [45.7, 13103.0], [45.8, 13103.0], [45.9, 13103.0], [46.0, 13320.0], [46.1, 13320.0], [46.2, 13320.0], [46.3, 13320.0], [46.4, 13320.0], [46.5, 13320.0], [46.6, 13320.0], [46.7, 13320.0], [46.8, 13320.0], [46.9, 13320.0], [47.0, 13611.0], [47.1, 13611.0], [47.2, 13611.0], [47.3, 13611.0], [47.4, 13611.0], [47.5, 13611.0], [47.6, 13611.0], [47.7, 13611.0], [47.8, 13611.0], [47.9, 13611.0], [48.0, 13908.0], [48.1, 13908.0], [48.2, 13908.0], [48.3, 13908.0], [48.4, 13908.0], [48.5, 13908.0], [48.6, 13908.0], [48.7, 13908.0], [48.8, 13908.0], [48.9, 13908.0], [49.0, 13946.0], [49.1, 13946.0], [49.2, 13946.0], [49.3, 13946.0], [49.4, 13946.0], [49.5, 13946.0], [49.6, 13946.0], [49.7, 13946.0], [49.8, 13946.0], [49.9, 13946.0], [50.0, 14252.0], [50.1, 14252.0], [50.2, 14252.0], [50.3, 14252.0], [50.4, 14252.0], [50.5, 14252.0], [50.6, 14252.0], [50.7, 14252.0], [50.8, 14252.0], [50.9, 14252.0], [51.0, 14305.0], [51.1, 14305.0], [51.2, 14305.0], [51.3, 14305.0], [51.4, 14305.0], [51.5, 14305.0], [51.6, 14305.0], [51.7, 14305.0], [51.8, 14305.0], [51.9, 14305.0], [52.0, 15615.0], [52.1, 15615.0], [52.2, 15615.0], [52.3, 15615.0], [52.4, 15615.0], [52.5, 15615.0], [52.6, 15615.0], [52.7, 15615.0], [52.8, 15615.0], [52.9, 15615.0], [53.0, 16228.0], [53.1, 16228.0], [53.2, 16228.0], [53.3, 16228.0], [53.4, 16228.0], [53.5, 16228.0], [53.6, 16228.0], [53.7, 16228.0], [53.8, 16228.0], [53.9, 16228.0], [54.0, 16893.0], [54.1, 16893.0], [54.2, 16893.0], [54.3, 16893.0], [54.4, 16893.0], [54.5, 16893.0], [54.6, 16893.0], [54.7, 16893.0], [54.8, 16893.0], [54.9, 16893.0], [55.0, 16941.0], [55.1, 16941.0], [55.2, 16941.0], [55.3, 16941.0], [55.4, 16941.0], [55.5, 16941.0], [55.6, 16941.0], [55.7, 16941.0], [55.8, 16941.0], [55.9, 16941.0], [56.0, 17020.0], [56.1, 17020.0], [56.2, 17020.0], [56.3, 17020.0], [56.4, 17020.0], [56.5, 17020.0], [56.6, 17020.0], [56.7, 17020.0], [56.8, 17020.0], [56.9, 17020.0], [57.0, 17491.0], [57.1, 17491.0], [57.2, 17491.0], [57.3, 17491.0], [57.4, 17491.0], [57.5, 17491.0], [57.6, 17491.0], [57.7, 17491.0], [57.8, 17491.0], [57.9, 17491.0], [58.0, 17494.0], [58.1, 17494.0], [58.2, 17494.0], [58.3, 17494.0], [58.4, 17494.0], [58.5, 17494.0], [58.6, 17494.0], [58.7, 17494.0], [58.8, 17494.0], [58.9, 17494.0], [59.0, 17618.0], [59.1, 17618.0], [59.2, 17618.0], [59.3, 17618.0], [59.4, 17618.0], [59.5, 17618.0], [59.6, 17618.0], [59.7, 17618.0], [59.8, 17618.0], [59.9, 17618.0], [60.0, 17905.0], [60.1, 17905.0], [60.2, 17905.0], [60.3, 17905.0], [60.4, 17905.0], [60.5, 17905.0], [60.6, 17905.0], [60.7, 17905.0], [60.8, 17905.0], [60.9, 17905.0], [61.0, 18483.0], [61.1, 18483.0], [61.2, 18483.0], [61.3, 18483.0], [61.4, 18483.0], [61.5, 18483.0], [61.6, 18483.0], [61.7, 18483.0], [61.8, 18483.0], [61.9, 18483.0], [62.0, 18932.0], [62.1, 18932.0], [62.2, 18932.0], [62.3, 18932.0], [62.4, 18932.0], [62.5, 18932.0], [62.6, 18932.0], [62.7, 18932.0], [62.8, 18932.0], [62.9, 18932.0], [63.0, 19340.0], [63.1, 19340.0], [63.2, 19340.0], [63.3, 19340.0], [63.4, 19340.0], [63.5, 19340.0], [63.6, 19340.0], [63.7, 19340.0], [63.8, 19340.0], [63.9, 19340.0], [64.0, 19454.0], [64.1, 19454.0], [64.2, 19454.0], [64.3, 19454.0], [64.4, 19454.0], [64.5, 19454.0], [64.6, 19454.0], [64.7, 19454.0], [64.8, 19454.0], [64.9, 19454.0], [65.0, 19568.0], [65.1, 19568.0], [65.2, 19568.0], [65.3, 19568.0], [65.4, 19568.0], [65.5, 19568.0], [65.6, 19568.0], [65.7, 19568.0], [65.8, 19568.0], [65.9, 19568.0], [66.0, 20616.0], [66.1, 20616.0], [66.2, 20616.0], [66.3, 20616.0], [66.4, 20616.0], [66.5, 20616.0], [66.6, 20616.0], [66.7, 20616.0], [66.8, 20616.0], [66.9, 20616.0], [67.0, 21296.0], [67.1, 21296.0], [67.2, 21296.0], [67.3, 21296.0], [67.4, 21296.0], [67.5, 21296.0], [67.6, 21296.0], [67.7, 21296.0], [67.8, 21296.0], [67.9, 21296.0], [68.0, 21751.0], [68.1, 21751.0], [68.2, 21751.0], [68.3, 21751.0], [68.4, 21751.0], [68.5, 21751.0], [68.6, 21751.0], [68.7, 21751.0], [68.8, 21751.0], [68.9, 21751.0], [69.0, 22128.0], [69.1, 22128.0], [69.2, 22128.0], [69.3, 22128.0], [69.4, 22128.0], [69.5, 22128.0], [69.6, 22128.0], [69.7, 22128.0], [69.8, 22128.0], [69.9, 22128.0], [70.0, 23424.0], [70.1, 23424.0], [70.2, 23424.0], [70.3, 23424.0], [70.4, 23424.0], [70.5, 23424.0], [70.6, 23424.0], [70.7, 23424.0], [70.8, 23424.0], [70.9, 23424.0], [71.0, 24182.0], [71.1, 24182.0], [71.2, 24182.0], [71.3, 24182.0], [71.4, 24182.0], [71.5, 24182.0], [71.6, 24182.0], [71.7, 24182.0], [71.8, 24182.0], [71.9, 24182.0], [72.0, 24967.0], [72.1, 24967.0], [72.2, 24967.0], [72.3, 24967.0], [72.4, 24967.0], [72.5, 24967.0], [72.6, 24967.0], [72.7, 24967.0], [72.8, 24967.0], [72.9, 24967.0], [73.0, 25260.0], [73.1, 25260.0], [73.2, 25260.0], [73.3, 25260.0], [73.4, 25260.0], [73.5, 25260.0], [73.6, 25260.0], [73.7, 25260.0], [73.8, 25260.0], [73.9, 25260.0], [74.0, 25434.0], [74.1, 25434.0], [74.2, 25434.0], [74.3, 25434.0], [74.4, 25434.0], [74.5, 25434.0], [74.6, 25434.0], [74.7, 25434.0], [74.8, 25434.0], [74.9, 25434.0], [75.0, 25614.0], [75.1, 25614.0], [75.2, 25614.0], [75.3, 25614.0], [75.4, 25614.0], [75.5, 25614.0], [75.6, 25614.0], [75.7, 25614.0], [75.8, 25614.0], [75.9, 25614.0], [76.0, 25635.0], [76.1, 25635.0], [76.2, 25635.0], [76.3, 25635.0], [76.4, 25635.0], [76.5, 25635.0], [76.6, 25635.0], [76.7, 25635.0], [76.8, 25635.0], [76.9, 25635.0], [77.0, 25773.0], [77.1, 25773.0], [77.2, 25773.0], [77.3, 25773.0], [77.4, 25773.0], [77.5, 25773.0], [77.6, 25773.0], [77.7, 25773.0], [77.8, 25773.0], [77.9, 25773.0], [78.0, 26539.0], [78.1, 26539.0], [78.2, 26539.0], [78.3, 26539.0], [78.4, 26539.0], [78.5, 26539.0], [78.6, 26539.0], [78.7, 26539.0], [78.8, 26539.0], [78.9, 26539.0], [79.0, 26723.0], [79.1, 26723.0], [79.2, 26723.0], [79.3, 26723.0], [79.4, 26723.0], [79.5, 26723.0], [79.6, 26723.0], [79.7, 26723.0], [79.8, 26723.0], [79.9, 26723.0], [80.0, 27061.0], [80.1, 27061.0], [80.2, 27061.0], [80.3, 27061.0], [80.4, 27061.0], [80.5, 27061.0], [80.6, 27061.0], [80.7, 27061.0], [80.8, 27061.0], [80.9, 27061.0], [81.0, 27094.0], [81.1, 27094.0], [81.2, 27094.0], [81.3, 27094.0], [81.4, 27094.0], [81.5, 27094.0], [81.6, 27094.0], [81.7, 27094.0], [81.8, 27094.0], [81.9, 27094.0], [82.0, 27144.0], [82.1, 27144.0], [82.2, 27144.0], [82.3, 27144.0], [82.4, 27144.0], [82.5, 27144.0], [82.6, 27144.0], [82.7, 27144.0], [82.8, 27144.0], [82.9, 27144.0], [83.0, 27547.0], [83.1, 27547.0], [83.2, 27547.0], [83.3, 27547.0], [83.4, 27547.0], [83.5, 27547.0], [83.6, 27547.0], [83.7, 27547.0], [83.8, 27547.0], [83.9, 27547.0], [84.0, 28195.0], [84.1, 28195.0], [84.2, 28195.0], [84.3, 28195.0], [84.4, 28195.0], [84.5, 28195.0], [84.6, 28195.0], [84.7, 28195.0], [84.8, 28195.0], [84.9, 28195.0], [85.0, 28212.0], [85.1, 28212.0], [85.2, 28212.0], [85.3, 28212.0], [85.4, 28212.0], [85.5, 28212.0], [85.6, 28212.0], [85.7, 28212.0], [85.8, 28212.0], [85.9, 28212.0], [86.0, 28405.0], [86.1, 28405.0], [86.2, 28405.0], [86.3, 28405.0], [86.4, 28405.0], [86.5, 28405.0], [86.6, 28405.0], [86.7, 28405.0], [86.8, 28405.0], [86.9, 28405.0], [87.0, 28818.0], [87.1, 28818.0], [87.2, 28818.0], [87.3, 28818.0], [87.4, 28818.0], [87.5, 28818.0], [87.6, 28818.0], [87.7, 28818.0], [87.8, 28818.0], [87.9, 28818.0], [88.0, 29866.0], [88.1, 29866.0], [88.2, 29866.0], [88.3, 29866.0], [88.4, 29866.0], [88.5, 29866.0], [88.6, 29866.0], [88.7, 29866.0], [88.8, 29866.0], [88.9, 29866.0], [89.0, 30008.0], [89.1, 30008.0], [89.2, 30008.0], [89.3, 30008.0], [89.4, 30008.0], [89.5, 30008.0], [89.6, 30008.0], [89.7, 30008.0], [89.8, 30008.0], [89.9, 30008.0], [90.0, 30467.0], [90.1, 30467.0], [90.2, 30467.0], [90.3, 30467.0], [90.4, 30467.0], [90.5, 30467.0], [90.6, 30467.0], [90.7, 30467.0], [90.8, 30467.0], [90.9, 30467.0], [91.0, 32254.0], [91.1, 32254.0], [91.2, 32254.0], [91.3, 32254.0], [91.4, 32254.0], [91.5, 32254.0], [91.6, 32254.0], [91.7, 32254.0], [91.8, 32254.0], [91.9, 32254.0], [92.0, 33185.0], [92.1, 33185.0], [92.2, 33185.0], [92.3, 33185.0], [92.4, 33185.0], [92.5, 33185.0], [92.6, 33185.0], [92.7, 33185.0], [92.8, 33185.0], [92.9, 33185.0], [93.0, 33782.0], [93.1, 33782.0], [93.2, 33782.0], [93.3, 33782.0], [93.4, 33782.0], [93.5, 33782.0], [93.6, 33782.0], [93.7, 33782.0], [93.8, 33782.0], [93.9, 33782.0], [94.0, 34453.0], [94.1, 34453.0], [94.2, 34453.0], [94.3, 34453.0], [94.4, 34453.0], [94.5, 34453.0], [94.6, 34453.0], [94.7, 34453.0], [94.8, 34453.0], [94.9, 34453.0], [95.0, 34464.0], [95.1, 34464.0], [95.2, 34464.0], [95.3, 34464.0], [95.4, 34464.0], [95.5, 34464.0], [95.6, 34464.0], [95.7, 34464.0], [95.8, 34464.0], [95.9, 34464.0], [96.0, 35868.0], [96.1, 35868.0], [96.2, 35868.0], [96.3, 35868.0], [96.4, 35868.0], [96.5, 35868.0], [96.6, 35868.0], [96.7, 35868.0], [96.8, 35868.0], [96.9, 35868.0], [97.0, 39095.0], [97.1, 39095.0], [97.2, 39095.0], [97.3, 39095.0], [97.4, 39095.0], [97.5, 39095.0], [97.6, 39095.0], [97.7, 39095.0], [97.8, 39095.0], [97.9, 39095.0], [98.0, 41856.0], [98.1, 41856.0], [98.2, 41856.0], [98.3, 41856.0], [98.4, 41856.0], [98.5, 41856.0], [98.6, 41856.0], [98.7, 41856.0], [98.8, 41856.0], [98.9, 41856.0], [99.0, 41969.0], [99.1, 41969.0], [99.2, 41969.0], [99.3, 41969.0], [99.4, 41969.0], [99.5, 41969.0], [99.6, 41969.0], [99.7, 41969.0], [99.8, 41969.0], [99.9, 41969.0]], "isOverall": false, "label": "solutionsHttpRequest", "isController": false}, {"data": [[0.0, 1.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 2.0], [1.1, 2.0], [1.2, 2.0], [1.3, 2.0], [1.4, 2.0], [1.5, 2.0], [1.6, 2.0], [1.7, 2.0], [1.8, 2.0], [1.9, 2.0], [2.0, 2.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 2.0], [2.6, 2.0], [2.7, 2.0], [2.8, 2.0], [2.9, 2.0], [3.0, 3.0], [3.1, 3.0], [3.2, 3.0], [3.3, 3.0], [3.4, 3.0], [3.5, 3.0], [3.6, 3.0], [3.7, 3.0], [3.8, 3.0], [3.9, 3.0], [4.0, 4.0], [4.1, 4.0], [4.2, 4.0], [4.3, 4.0], [4.4, 4.0], [4.5, 4.0], [4.6, 4.0], [4.7, 4.0], [4.8, 4.0], [4.9, 4.0], [5.0, 1989.0], [5.1, 1989.0], [5.2, 1989.0], [5.3, 1989.0], [5.4, 1989.0], [5.5, 1989.0], [5.6, 1989.0], [5.7, 1989.0], [5.8, 1989.0], [5.9, 1989.0], [6.0, 3510.0], [6.1, 3510.0], [6.2, 3510.0], [6.3, 3510.0], [6.4, 3510.0], [6.5, 3510.0], [6.6, 3510.0], [6.7, 3510.0], [6.8, 3510.0], [6.9, 3510.0], [7.0, 3542.0], [7.1, 3542.0], [7.2, 3542.0], [7.3, 3542.0], [7.4, 3542.0], [7.5, 3542.0], [7.6, 3542.0], [7.7, 3542.0], [7.8, 3542.0], [7.9, 3542.0], [8.0, 4141.0], [8.1, 4141.0], [8.2, 4141.0], [8.3, 4141.0], [8.4, 4141.0], [8.5, 4141.0], [8.6, 4141.0], [8.7, 4141.0], [8.8, 4141.0], [8.9, 4141.0], [9.0, 4583.0], [9.1, 4583.0], [9.2, 4583.0], [9.3, 4583.0], [9.4, 4583.0], [9.5, 4583.0], [9.6, 4583.0], [9.7, 4583.0], [9.8, 4583.0], [9.9, 4583.0], [10.0, 5137.0], [10.1, 5137.0], [10.2, 5137.0], [10.3, 5137.0], [10.4, 5137.0], [10.5, 5137.0], [10.6, 5137.0], [10.7, 5137.0], [10.8, 5137.0], [10.9, 5137.0], [11.0, 5281.0], [11.1, 5281.0], [11.2, 5281.0], [11.3, 5281.0], [11.4, 5281.0], [11.5, 5281.0], [11.6, 5281.0], [11.7, 5281.0], [11.8, 5281.0], [11.9, 5281.0], [12.0, 6674.0], [12.1, 6674.0], [12.2, 6674.0], [12.3, 6674.0], [12.4, 6674.0], [12.5, 6674.0], [12.6, 6674.0], [12.7, 6674.0], [12.8, 6674.0], [12.9, 6674.0], [13.0, 6790.0], [13.1, 6790.0], [13.2, 6790.0], [13.3, 6790.0], [13.4, 6790.0], [13.5, 6790.0], [13.6, 6790.0], [13.7, 6790.0], [13.8, 6790.0], [13.9, 6790.0], [14.0, 7265.0], [14.1, 7265.0], [14.2, 7265.0], [14.3, 7265.0], [14.4, 7265.0], [14.5, 7265.0], [14.6, 7265.0], [14.7, 7265.0], [14.8, 7265.0], [14.9, 7265.0], [15.0, 7267.0], [15.1, 7267.0], [15.2, 7267.0], [15.3, 7267.0], [15.4, 7267.0], [15.5, 7267.0], [15.6, 7267.0], [15.7, 7267.0], [15.8, 7267.0], [15.9, 7267.0], [16.0, 7363.0], [16.1, 7363.0], [16.2, 7363.0], [16.3, 7363.0], [16.4, 7363.0], [16.5, 7363.0], [16.6, 7363.0], [16.7, 7363.0], [16.8, 7363.0], [16.9, 7363.0], [17.0, 7642.0], [17.1, 7642.0], [17.2, 7642.0], [17.3, 7642.0], [17.4, 7642.0], [17.5, 7642.0], [17.6, 7642.0], [17.7, 7642.0], [17.8, 7642.0], [17.9, 7642.0], [18.0, 7925.0], [18.1, 7925.0], [18.2, 7925.0], [18.3, 7925.0], [18.4, 7925.0], [18.5, 7925.0], [18.6, 7925.0], [18.7, 7925.0], [18.8, 7925.0], [18.9, 7925.0], [19.0, 10076.0], [19.1, 10076.0], [19.2, 10076.0], [19.3, 10076.0], [19.4, 10076.0], [19.5, 10076.0], [19.6, 10076.0], [19.7, 10076.0], [19.8, 10076.0], [19.9, 10076.0], [20.0, 10163.0], [20.1, 10163.0], [20.2, 10163.0], [20.3, 10163.0], [20.4, 10163.0], [20.5, 10163.0], [20.6, 10163.0], [20.7, 10163.0], [20.8, 10163.0], [20.9, 10163.0], [21.0, 10799.0], [21.1, 10799.0], [21.2, 10799.0], [21.3, 10799.0], [21.4, 10799.0], [21.5, 10799.0], [21.6, 10799.0], [21.7, 10799.0], [21.8, 10799.0], [21.9, 10799.0], [22.0, 11401.0], [22.1, 11401.0], [22.2, 11401.0], [22.3, 11401.0], [22.4, 11401.0], [22.5, 11401.0], [22.6, 11401.0], [22.7, 11401.0], [22.8, 11401.0], [22.9, 11401.0], [23.0, 12059.0], [23.1, 12059.0], [23.2, 12059.0], [23.3, 12059.0], [23.4, 12059.0], [23.5, 12059.0], [23.6, 12059.0], [23.7, 12059.0], [23.8, 12059.0], [23.9, 12059.0], [24.0, 12703.0], [24.1, 12703.0], [24.2, 12703.0], [24.3, 12703.0], [24.4, 12703.0], [24.5, 12703.0], [24.6, 12703.0], [24.7, 12703.0], [24.8, 12703.0], [24.9, 12703.0], [25.0, 12815.0], [25.1, 12815.0], [25.2, 12815.0], [25.3, 12815.0], [25.4, 12815.0], [25.5, 12815.0], [25.6, 12815.0], [25.7, 12815.0], [25.8, 12815.0], [25.9, 12815.0], [26.0, 13862.0], [26.1, 13862.0], [26.2, 13862.0], [26.3, 13862.0], [26.4, 13862.0], [26.5, 13862.0], [26.6, 13862.0], [26.7, 13862.0], [26.8, 13862.0], [26.9, 13862.0], [27.0, 14051.0], [27.1, 14051.0], [27.2, 14051.0], [27.3, 14051.0], [27.4, 14051.0], [27.5, 14051.0], [27.6, 14051.0], [27.7, 14051.0], [27.8, 14051.0], [27.9, 14051.0], [28.0, 14067.0], [28.1, 14067.0], [28.2, 14067.0], [28.3, 14067.0], [28.4, 14067.0], [28.5, 14067.0], [28.6, 14067.0], [28.7, 14067.0], [28.8, 14067.0], [28.9, 14067.0], [29.0, 14073.0], [29.1, 14073.0], [29.2, 14073.0], [29.3, 14073.0], [29.4, 14073.0], [29.5, 14073.0], [29.6, 14073.0], [29.7, 14073.0], [29.8, 14073.0], [29.9, 14073.0], [30.0, 14130.0], [30.1, 14130.0], [30.2, 14130.0], [30.3, 14130.0], [30.4, 14130.0], [30.5, 14130.0], [30.6, 14130.0], [30.7, 14130.0], [30.8, 14130.0], [30.9, 14130.0], [31.0, 14243.0], [31.1, 14243.0], [31.2, 14243.0], [31.3, 14243.0], [31.4, 14243.0], [31.5, 14243.0], [31.6, 14243.0], [31.7, 14243.0], [31.8, 14243.0], [31.9, 14243.0], [32.0, 15347.0], [32.1, 15347.0], [32.2, 15347.0], [32.3, 15347.0], [32.4, 15347.0], [32.5, 15347.0], [32.6, 15347.0], [32.7, 15347.0], [32.8, 15347.0], [32.9, 15347.0], [33.0, 16413.0], [33.1, 16413.0], [33.2, 16413.0], [33.3, 16413.0], [33.4, 16413.0], [33.5, 16413.0], [33.6, 16413.0], [33.7, 16413.0], [33.8, 16413.0], [33.9, 16413.0], [34.0, 16578.0], [34.1, 16578.0], [34.2, 16578.0], [34.3, 16578.0], [34.4, 16578.0], [34.5, 16578.0], [34.6, 16578.0], [34.7, 16578.0], [34.8, 16578.0], [34.9, 16578.0], [35.0, 16949.0], [35.1, 16949.0], [35.2, 16949.0], [35.3, 16949.0], [35.4, 16949.0], [35.5, 16949.0], [35.6, 16949.0], [35.7, 16949.0], [35.8, 16949.0], [35.9, 16949.0], [36.0, 17085.0], [36.1, 17085.0], [36.2, 17085.0], [36.3, 17085.0], [36.4, 17085.0], [36.5, 17085.0], [36.6, 17085.0], [36.7, 17085.0], [36.8, 17085.0], [36.9, 17085.0], [37.0, 17196.0], [37.1, 17196.0], [37.2, 17196.0], [37.3, 17196.0], [37.4, 17196.0], [37.5, 17196.0], [37.6, 17196.0], [37.7, 17196.0], [37.8, 17196.0], [37.9, 17196.0], [38.0, 17681.0], [38.1, 17681.0], [38.2, 17681.0], [38.3, 17681.0], [38.4, 17681.0], [38.5, 17681.0], [38.6, 17681.0], [38.7, 17681.0], [38.8, 17681.0], [38.9, 17681.0], [39.0, 17705.0], [39.1, 17705.0], [39.2, 17705.0], [39.3, 17705.0], [39.4, 17705.0], [39.5, 17705.0], [39.6, 17705.0], [39.7, 17705.0], [39.8, 17705.0], [39.9, 17705.0], [40.0, 17729.0], [40.1, 17729.0], [40.2, 17729.0], [40.3, 17729.0], [40.4, 17729.0], [40.5, 17729.0], [40.6, 17729.0], [40.7, 17729.0], [40.8, 17729.0], [40.9, 17729.0], [41.0, 19084.0], [41.1, 19084.0], [41.2, 19084.0], [41.3, 19084.0], [41.4, 19084.0], [41.5, 19084.0], [41.6, 19084.0], [41.7, 19084.0], [41.8, 19084.0], [41.9, 19084.0], [42.0, 19203.0], [42.1, 19203.0], [42.2, 19203.0], [42.3, 19203.0], [42.4, 19203.0], [42.5, 19203.0], [42.6, 19203.0], [42.7, 19203.0], [42.8, 19203.0], [42.9, 19203.0], [43.0, 19420.0], [43.1, 19420.0], [43.2, 19420.0], [43.3, 19420.0], [43.4, 19420.0], [43.5, 19420.0], [43.6, 19420.0], [43.7, 19420.0], [43.8, 19420.0], [43.9, 19420.0], [44.0, 19527.0], [44.1, 19527.0], [44.2, 19527.0], [44.3, 19527.0], [44.4, 19527.0], [44.5, 19527.0], [44.6, 19527.0], [44.7, 19527.0], [44.8, 19527.0], [44.9, 19527.0], [45.0, 19670.0], [45.1, 19670.0], [45.2, 19670.0], [45.3, 19670.0], [45.4, 19670.0], [45.5, 19670.0], [45.6, 19670.0], [45.7, 19670.0], [45.8, 19670.0], [45.9, 19670.0], [46.0, 19752.0], [46.1, 19752.0], [46.2, 19752.0], [46.3, 19752.0], [46.4, 19752.0], [46.5, 19752.0], [46.6, 19752.0], [46.7, 19752.0], [46.8, 19752.0], [46.9, 19752.0], [47.0, 19785.0], [47.1, 19785.0], [47.2, 19785.0], [47.3, 19785.0], [47.4, 19785.0], [47.5, 19785.0], [47.6, 19785.0], [47.7, 19785.0], [47.8, 19785.0], [47.9, 19785.0], [48.0, 20049.0], [48.1, 20049.0], [48.2, 20049.0], [48.3, 20049.0], [48.4, 20049.0], [48.5, 20049.0], [48.6, 20049.0], [48.7, 20049.0], [48.8, 20049.0], [48.9, 20049.0], [49.0, 20138.0], [49.1, 20138.0], [49.2, 20138.0], [49.3, 20138.0], [49.4, 20138.0], [49.5, 20138.0], [49.6, 20138.0], [49.7, 20138.0], [49.8, 20138.0], [49.9, 20138.0], [50.0, 20188.0], [50.1, 20188.0], [50.2, 20188.0], [50.3, 20188.0], [50.4, 20188.0], [50.5, 20188.0], [50.6, 20188.0], [50.7, 20188.0], [50.8, 20188.0], [50.9, 20188.0], [51.0, 20311.0], [51.1, 20311.0], [51.2, 20311.0], [51.3, 20311.0], [51.4, 20311.0], [51.5, 20311.0], [51.6, 20311.0], [51.7, 20311.0], [51.8, 20311.0], [51.9, 20311.0], [52.0, 20339.0], [52.1, 20339.0], [52.2, 20339.0], [52.3, 20339.0], [52.4, 20339.0], [52.5, 20339.0], [52.6, 20339.0], [52.7, 20339.0], [52.8, 20339.0], [52.9, 20339.0], [53.0, 21303.0], [53.1, 21303.0], [53.2, 21303.0], [53.3, 21303.0], [53.4, 21303.0], [53.5, 21303.0], [53.6, 21303.0], [53.7, 21303.0], [53.8, 21303.0], [53.9, 21303.0], [54.0, 22849.0], [54.1, 22849.0], [54.2, 22849.0], [54.3, 22849.0], [54.4, 22849.0], [54.5, 22849.0], [54.6, 22849.0], [54.7, 22849.0], [54.8, 22849.0], [54.9, 22849.0], [55.0, 23017.0], [55.1, 23017.0], [55.2, 23017.0], [55.3, 23017.0], [55.4, 23017.0], [55.5, 23017.0], [55.6, 23017.0], [55.7, 23017.0], [55.8, 23017.0], [55.9, 23017.0], [56.0, 23069.0], [56.1, 23069.0], [56.2, 23069.0], [56.3, 23069.0], [56.4, 23069.0], [56.5, 23069.0], [56.6, 23069.0], [56.7, 23069.0], [56.8, 23069.0], [56.9, 23069.0], [57.0, 23110.0], [57.1, 23110.0], [57.2, 23110.0], [57.3, 23110.0], [57.4, 23110.0], [57.5, 23110.0], [57.6, 23110.0], [57.7, 23110.0], [57.8, 23110.0], [57.9, 23110.0], [58.0, 23554.0], [58.1, 23554.0], [58.2, 23554.0], [58.3, 23554.0], [58.4, 23554.0], [58.5, 23554.0], [58.6, 23554.0], [58.7, 23554.0], [58.8, 23554.0], [58.9, 23554.0], [59.0, 23632.0], [59.1, 23632.0], [59.2, 23632.0], [59.3, 23632.0], [59.4, 23632.0], [59.5, 23632.0], [59.6, 23632.0], [59.7, 23632.0], [59.8, 23632.0], [59.9, 23632.0], [60.0, 23776.0], [60.1, 23776.0], [60.2, 23776.0], [60.3, 23776.0], [60.4, 23776.0], [60.5, 23776.0], [60.6, 23776.0], [60.7, 23776.0], [60.8, 23776.0], [60.9, 23776.0], [61.0, 24035.0], [61.1, 24035.0], [61.2, 24035.0], [61.3, 24035.0], [61.4, 24035.0], [61.5, 24035.0], [61.6, 24035.0], [61.7, 24035.0], [61.8, 24035.0], [61.9, 24035.0], [62.0, 24260.0], [62.1, 24260.0], [62.2, 24260.0], [62.3, 24260.0], [62.4, 24260.0], [62.5, 24260.0], [62.6, 24260.0], [62.7, 24260.0], [62.8, 24260.0], [62.9, 24260.0], [63.0, 24345.0], [63.1, 24345.0], [63.2, 24345.0], [63.3, 24345.0], [63.4, 24345.0], [63.5, 24345.0], [63.6, 24345.0], [63.7, 24345.0], [63.8, 24345.0], [63.9, 24345.0], [64.0, 24493.0], [64.1, 24493.0], [64.2, 24493.0], [64.3, 24493.0], [64.4, 24493.0], [64.5, 24493.0], [64.6, 24493.0], [64.7, 24493.0], [64.8, 24493.0], [64.9, 24493.0], [65.0, 24508.0], [65.1, 24508.0], [65.2, 24508.0], [65.3, 24508.0], [65.4, 24508.0], [65.5, 24508.0], [65.6, 24508.0], [65.7, 24508.0], [65.8, 24508.0], [65.9, 24508.0], [66.0, 24622.0], [66.1, 24622.0], [66.2, 24622.0], [66.3, 24622.0], [66.4, 24622.0], [66.5, 24622.0], [66.6, 24622.0], [66.7, 24622.0], [66.8, 24622.0], [66.9, 24622.0], [67.0, 25277.0], [67.1, 25277.0], [67.2, 25277.0], [67.3, 25277.0], [67.4, 25277.0], [67.5, 25277.0], [67.6, 25277.0], [67.7, 25277.0], [67.8, 25277.0], [67.9, 25277.0], [68.0, 25957.0], [68.1, 25957.0], [68.2, 25957.0], [68.3, 25957.0], [68.4, 25957.0], [68.5, 25957.0], [68.6, 25957.0], [68.7, 25957.0], [68.8, 25957.0], [68.9, 25957.0], [69.0, 26211.0], [69.1, 26211.0], [69.2, 26211.0], [69.3, 26211.0], [69.4, 26211.0], [69.5, 26211.0], [69.6, 26211.0], [69.7, 26211.0], [69.8, 26211.0], [69.9, 26211.0], [70.0, 26762.0], [70.1, 26762.0], [70.2, 26762.0], [70.3, 26762.0], [70.4, 26762.0], [70.5, 26762.0], [70.6, 26762.0], [70.7, 26762.0], [70.8, 26762.0], [70.9, 26762.0], [71.0, 27346.0], [71.1, 27346.0], [71.2, 27346.0], [71.3, 27346.0], [71.4, 27346.0], [71.5, 27346.0], [71.6, 27346.0], [71.7, 27346.0], [71.8, 27346.0], [71.9, 27346.0], [72.0, 27399.0], [72.1, 27399.0], [72.2, 27399.0], [72.3, 27399.0], [72.4, 27399.0], [72.5, 27399.0], [72.6, 27399.0], [72.7, 27399.0], [72.8, 27399.0], [72.9, 27399.0], [73.0, 27546.0], [73.1, 27546.0], [73.2, 27546.0], [73.3, 27546.0], [73.4, 27546.0], [73.5, 27546.0], [73.6, 27546.0], [73.7, 27546.0], [73.8, 27546.0], [73.9, 27546.0], [74.0, 28171.0], [74.1, 28171.0], [74.2, 28171.0], [74.3, 28171.0], [74.4, 28171.0], [74.5, 28171.0], [74.6, 28171.0], [74.7, 28171.0], [74.8, 28171.0], [74.9, 28171.0], [75.0, 29341.0], [75.1, 29341.0], [75.2, 29341.0], [75.3, 29341.0], [75.4, 29341.0], [75.5, 29341.0], [75.6, 29341.0], [75.7, 29341.0], [75.8, 29341.0], [75.9, 29341.0], [76.0, 29520.0], [76.1, 29520.0], [76.2, 29520.0], [76.3, 29520.0], [76.4, 29520.0], [76.5, 29520.0], [76.6, 29520.0], [76.7, 29520.0], [76.8, 29520.0], [76.9, 29520.0], [77.0, 29816.0], [77.1, 29816.0], [77.2, 29816.0], [77.3, 29816.0], [77.4, 29816.0], [77.5, 29816.0], [77.6, 29816.0], [77.7, 29816.0], [77.8, 29816.0], [77.9, 29816.0], [78.0, 29922.0], [78.1, 29922.0], [78.2, 29922.0], [78.3, 29922.0], [78.4, 29922.0], [78.5, 29922.0], [78.6, 29922.0], [78.7, 29922.0], [78.8, 29922.0], [78.9, 29922.0], [79.0, 30267.0], [79.1, 30267.0], [79.2, 30267.0], [79.3, 30267.0], [79.4, 30267.0], [79.5, 30267.0], [79.6, 30267.0], [79.7, 30267.0], [79.8, 30267.0], [79.9, 30267.0], [80.0, 30707.0], [80.1, 30707.0], [80.2, 30707.0], [80.3, 30707.0], [80.4, 30707.0], [80.5, 30707.0], [80.6, 30707.0], [80.7, 30707.0], [80.8, 30707.0], [80.9, 30707.0], [81.0, 31714.0], [81.1, 31714.0], [81.2, 31714.0], [81.3, 31714.0], [81.4, 31714.0], [81.5, 31714.0], [81.6, 31714.0], [81.7, 31714.0], [81.8, 31714.0], [81.9, 31714.0], [82.0, 31998.0], [82.1, 31998.0], [82.2, 31998.0], [82.3, 31998.0], [82.4, 31998.0], [82.5, 31998.0], [82.6, 31998.0], [82.7, 31998.0], [82.8, 31998.0], [82.9, 31998.0], [83.0, 33527.0], [83.1, 33527.0], [83.2, 33527.0], [83.3, 33527.0], [83.4, 33527.0], [83.5, 33527.0], [83.6, 33527.0], [83.7, 33527.0], [83.8, 33527.0], [83.9, 33527.0], [84.0, 34038.0], [84.1, 34038.0], [84.2, 34038.0], [84.3, 34038.0], [84.4, 34038.0], [84.5, 34038.0], [84.6, 34038.0], [84.7, 34038.0], [84.8, 34038.0], [84.9, 34038.0], [85.0, 34293.0], [85.1, 34293.0], [85.2, 34293.0], [85.3, 34293.0], [85.4, 34293.0], [85.5, 34293.0], [85.6, 34293.0], [85.7, 34293.0], [85.8, 34293.0], [85.9, 34293.0], [86.0, 34386.0], [86.1, 34386.0], [86.2, 34386.0], [86.3, 34386.0], [86.4, 34386.0], [86.5, 34386.0], [86.6, 34386.0], [86.7, 34386.0], [86.8, 34386.0], [86.9, 34386.0], [87.0, 34842.0], [87.1, 34842.0], [87.2, 34842.0], [87.3, 34842.0], [87.4, 34842.0], [87.5, 34842.0], [87.6, 34842.0], [87.7, 34842.0], [87.8, 34842.0], [87.9, 34842.0], [88.0, 35275.0], [88.1, 35275.0], [88.2, 35275.0], [88.3, 35275.0], [88.4, 35275.0], [88.5, 35275.0], [88.6, 35275.0], [88.7, 35275.0], [88.8, 35275.0], [88.9, 35275.0], [89.0, 36730.0], [89.1, 36730.0], [89.2, 36730.0], [89.3, 36730.0], [89.4, 36730.0], [89.5, 36730.0], [89.6, 36730.0], [89.7, 36730.0], [89.8, 36730.0], [89.9, 36730.0], [90.0, 36838.0], [90.1, 36838.0], [90.2, 36838.0], [90.3, 36838.0], [90.4, 36838.0], [90.5, 36838.0], [90.6, 36838.0], [90.7, 36838.0], [90.8, 36838.0], [90.9, 36838.0], [91.0, 39469.0], [91.1, 39469.0], [91.2, 39469.0], [91.3, 39469.0], [91.4, 39469.0], [91.5, 39469.0], [91.6, 39469.0], [91.7, 39469.0], [91.8, 39469.0], [91.9, 39469.0], [92.0, 41088.0], [92.1, 41088.0], [92.2, 41088.0], [92.3, 41088.0], [92.4, 41088.0], [92.5, 41088.0], [92.6, 41088.0], [92.7, 41088.0], [92.8, 41088.0], [92.9, 41088.0], [93.0, 43075.0], [93.1, 43075.0], [93.2, 43075.0], [93.3, 43075.0], [93.4, 43075.0], [93.5, 43075.0], [93.6, 43075.0], [93.7, 43075.0], [93.8, 43075.0], [93.9, 43075.0], [94.0, 46278.0], [94.1, 46278.0], [94.2, 46278.0], [94.3, 46278.0], [94.4, 46278.0], [94.5, 46278.0], [94.6, 46278.0], [94.7, 46278.0], [94.8, 46278.0], [94.9, 46278.0], [95.0, 48221.0], [95.1, 48221.0], [95.2, 48221.0], [95.3, 48221.0], [95.4, 48221.0], [95.5, 48221.0], [95.6, 48221.0], [95.7, 48221.0], [95.8, 48221.0], [95.9, 48221.0], [96.0, 51574.0], [96.1, 51574.0], [96.2, 51574.0], [96.3, 51574.0], [96.4, 51574.0], [96.5, 51574.0], [96.6, 51574.0], [96.7, 51574.0], [96.8, 51574.0], [96.9, 51574.0], [97.0, 54851.0], [97.1, 54851.0], [97.2, 54851.0], [97.3, 54851.0], [97.4, 54851.0], [97.5, 54851.0], [97.6, 54851.0], [97.7, 54851.0], [97.8, 54851.0], [97.9, 54851.0], [98.0, 58008.0], [98.1, 58008.0], [98.2, 58008.0], [98.3, 58008.0], [98.4, 58008.0], [98.5, 58008.0], [98.6, 58008.0], [98.7, 58008.0], [98.8, 58008.0], [98.9, 58008.0], [99.0, 67293.0], [99.1, 67293.0], [99.2, 67293.0], [99.3, 67293.0], [99.4, 67293.0], [99.5, 67293.0], [99.6, 67293.0], [99.7, 67293.0], [99.8, 67293.0], [99.9, 67293.0]], "isOverall": false, "label": "pricingHttpRequest", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 5.0, "series": [{"data": [[0.0, 3.0], [2100.0, 1.0], [2300.0, 1.0], [2400.0, 1.0], [2700.0, 1.0], [2800.0, 1.0], [3100.0, 1.0], [3200.0, 1.0], [3700.0, 1.0], [3900.0, 1.0], [4000.0, 1.0], [4200.0, 1.0], [4600.0, 2.0], [4500.0, 1.0], [4700.0, 1.0], [4800.0, 1.0], [5100.0, 1.0], [6100.0, 1.0], [6300.0, 1.0], [6600.0, 2.0], [6900.0, 1.0], [6800.0, 2.0], [6700.0, 1.0], [7200.0, 2.0], [7500.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [8300.0, 1.0], [8700.0, 1.0], [8500.0, 1.0], [8800.0, 1.0], [9200.0, 1.0], [8900.0, 1.0], [9000.0, 1.0], [9300.0, 1.0], [9800.0, 1.0], [10000.0, 1.0], [11100.0, 2.0], [11200.0, 2.0], [11400.0, 1.0], [11800.0, 1.0], [12100.0, 1.0], [12000.0, 1.0], [12900.0, 1.0], [13500.0, 2.0], [13800.0, 1.0], [14100.0, 1.0], [14200.0, 1.0], [13900.0, 1.0], [14300.0, 1.0], [14500.0, 2.0], [14600.0, 1.0], [15800.0, 2.0], [16300.0, 1.0], [16000.0, 1.0], [16400.0, 1.0], [17300.0, 1.0], [16800.0, 1.0], [16900.0, 1.0], [17600.0, 2.0], [18900.0, 1.0], [19300.0, 1.0], [19200.0, 1.0], [20300.0, 1.0], [19800.0, 1.0], [20100.0, 1.0], [20000.0, 1.0], [21400.0, 1.0], [20500.0, 1.0], [22000.0, 1.0], [22400.0, 1.0], [23000.0, 1.0], [22800.0, 1.0], [22600.0, 1.0], [24600.0, 1.0], [24800.0, 1.0], [26100.0, 1.0], [32400.0, 1.0], [32900.0, 1.0], [33900.0, 1.0], [40000.0, 1.0], [44200.0, 1.0], [45400.0, 1.0], [46600.0, 1.0], [48000.0, 1.0], [60500.0, 1.0], [61900.0, 1.0], [65600.0, 1.0]], "isOverall": false, "label": "homePageHttpRequest", "isController": false}, {"data": [[0.0, 2.0], [700.0, 1.0], [1000.0, 1.0], [1700.0, 1.0], [2000.0, 1.0], [2400.0, 1.0], [2500.0, 2.0], [2600.0, 1.0], [2700.0, 2.0], [2900.0, 1.0], [3300.0, 1.0], [3500.0, 2.0], [3900.0, 2.0], [4000.0, 1.0], [4100.0, 1.0], [4400.0, 1.0], [4600.0, 1.0], [5300.0, 1.0], [5200.0, 2.0], [5400.0, 1.0], [6700.0, 2.0], [8000.0, 2.0], [8100.0, 1.0], [8400.0, 1.0], [9200.0, 2.0], [9500.0, 1.0], [10100.0, 1.0], [10200.0, 2.0], [10400.0, 1.0], [10700.0, 1.0], [11000.0, 1.0], [10800.0, 1.0], [12700.0, 1.0], [13100.0, 1.0], [12900.0, 1.0], [13000.0, 1.0], [13300.0, 1.0], [13600.0, 1.0], [13900.0, 2.0], [14200.0, 1.0], [14300.0, 1.0], [15600.0, 1.0], [16200.0, 1.0], [17400.0, 2.0], [16800.0, 1.0], [17000.0, 1.0], [16900.0, 1.0], [18400.0, 1.0], [17600.0, 1.0], [17900.0, 1.0], [19400.0, 1.0], [18900.0, 1.0], [19300.0, 1.0], [19500.0, 1.0], [21200.0, 1.0], [20600.0, 1.0], [21700.0, 1.0], [22100.0, 1.0], [23400.0, 1.0], [24100.0, 1.0], [24900.0, 1.0], [25400.0, 1.0], [25200.0, 1.0], [25600.0, 2.0], [25700.0, 1.0], [26500.0, 1.0], [27000.0, 2.0], [27500.0, 1.0], [26700.0, 1.0], [27100.0, 1.0], [28200.0, 1.0], [28400.0, 1.0], [28100.0, 1.0], [28800.0, 1.0], [30400.0, 1.0], [29800.0, 1.0], [30000.0, 1.0], [32200.0, 1.0], [34400.0, 2.0], [33100.0, 1.0], [33700.0, 1.0], [35800.0, 1.0], [39000.0, 1.0], [41900.0, 1.0], [41800.0, 1.0]], "isOverall": false, "label": "solutionsHttpRequest", "isController": false}, {"data": [[0.0, 5.0], [1900.0, 1.0], [3500.0, 2.0], [4100.0, 1.0], [4500.0, 1.0], [5100.0, 1.0], [5200.0, 1.0], [6600.0, 1.0], [6700.0, 1.0], [7200.0, 2.0], [7300.0, 1.0], [7600.0, 1.0], [7900.0, 1.0], [10000.0, 1.0], [10100.0, 1.0], [10700.0, 1.0], [11400.0, 1.0], [12000.0, 1.0], [12700.0, 1.0], [12800.0, 1.0], [13800.0, 1.0], [14100.0, 1.0], [14000.0, 3.0], [14200.0, 1.0], [15300.0, 1.0], [17100.0, 1.0], [16400.0, 1.0], [16500.0, 1.0], [17000.0, 1.0], [16900.0, 1.0], [17700.0, 2.0], [17600.0, 1.0], [19000.0, 1.0], [19400.0, 1.0], [19200.0, 1.0], [20000.0, 1.0], [20100.0, 2.0], [19600.0, 1.0], [19700.0, 2.0], [19500.0, 1.0], [20300.0, 2.0], [21300.0, 1.0], [23500.0, 1.0], [23000.0, 2.0], [23100.0, 1.0], [22800.0, 1.0], [23600.0, 1.0], [24200.0, 1.0], [24500.0, 1.0], [23700.0, 1.0], [24300.0, 1.0], [24000.0, 1.0], [24400.0, 1.0], [24600.0, 1.0], [25200.0, 1.0], [25900.0, 1.0], [26200.0, 1.0], [27300.0, 2.0], [27500.0, 1.0], [26700.0, 1.0], [28100.0, 1.0], [29500.0, 1.0], [29300.0, 1.0], [29900.0, 1.0], [29800.0, 1.0], [30700.0, 1.0], [30200.0, 1.0], [31700.0, 1.0], [31900.0, 1.0], [34000.0, 1.0], [34800.0, 1.0], [34200.0, 1.0], [34300.0, 1.0], [33500.0, 1.0], [36700.0, 1.0], [35200.0, 1.0], [36800.0, 1.0], [39400.0, 1.0], [43000.0, 1.0], [41000.0, 1.0], [46200.0, 1.0], [48200.0, 1.0], [51500.0, 1.0], [54800.0, 1.0], [58000.0, 1.0], [67200.0, 1.0]], "isOverall": false, "label": "pricingHttpRequest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 67200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 244.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 244.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 54.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 13.390243902439023, "minX": 1.7115282E12, "maxY": 50.0, "series": [{"data": [[1.71152826E12, 50.0], [1.71152832E12, 42.96183206106869], [1.7115282E12, 50.0], [1.71152838E12, 13.390243902439023]], "isOverall": false, "label": "task6_userLoadTesting", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71152838E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 34825.0, "series": [{"data": [[34.0, 16998.0], [38.0, 22686.0], [41.0, 11650.0], [40.0, 15048.333333333334], [42.0, 1.0], [11.0, 2100.0], [47.0, 26164.0], [49.0, 13386.8], [48.0, 14176.5], [50.0, 16189.723684210521], [13.0, 4048.0], [16.0, 14675.0], [17.0, 3113.0], [31.0, 15846.0]], "isOverall": false, "label": "homePageHttpRequest", "isController": false}, {"data": [[47.079999999999984, 15400.799999999997]], "isOverall": false, "label": "homePageHttpRequest-Aggregated", "isController": false}, {"data": [[2.0, 768.0], [3.0, 1084.0], [4.0, 1737.0], [5.0, 10712.0], [6.0, 2535.0], [7.0, 4013.0], [8.0, 2715.0], [9.0, 20616.0], [10.0, 2728.0], [11.0, 12751.0], [12.0, 3584.0], [13.0, 21296.0], [14.0, 2608.0], [15.0, 16941.0], [16.0, 2515.0], [17.0, 13946.0], [18.0, 22128.0], [19.0, 16228.0], [20.0, 19568.0], [21.0, 15615.0], [22.0, 16822.5], [23.0, 14252.0], [24.0, 17905.0], [25.0, 13614.0], [26.0, 17020.0], [27.0, 16893.0], [28.0, 19684.5], [29.0, 17491.0], [30.0, 18932.0], [31.0, 4142.0], [33.0, 13072.0], [32.0, 3361.0], [35.0, 22390.5], [34.0, 2473.0], [37.0, 4632.0], [36.0, 21529.5], [39.0, 34464.0], [38.0, 4438.0], [41.0, 8475.0], [40.0, 6712.0], [43.0, 29549.0], [42.0, 34825.0], [45.0, 26539.0], [44.0, 25614.0], [47.0, 25260.0], [46.0, 25773.0], [49.0, 22205.0], [48.0, 24182.0], [50.0, 16083.410256410256], [1.0, 2020.0]], "isOverall": false, "label": "solutionsHttpRequest", "isController": false}, {"data": [[36.45, 15923.949999999997]], "isOverall": false, "label": "solutionsHttpRequest-Aggregated", "isController": false}, {"data": [[8.0, 3526.0], [35.0, 19283.0], [34.0, 10594.4], [36.0, 12059.0], [38.0, 24664.166666666668], [41.0, 17597.5], [40.0, 20975.75], [10.0, 13994.0], [42.0, 29594.0], [44.0, 29520.0], [49.0, 26762.0], [50.0, 23058.649122807023], [4.0, 5137.0], [17.0, 26211.0], [19.0, 6790.0], [20.0, 17085.0], [21.0, 20325.0], [22.0, 19527.0], [31.0, 33527.0]], "isOverall": false, "label": "pricingHttpRequest", "isController": false}, {"data": [[42.24, 21520.249999999996]], "isOverall": false, "label": "pricingHttpRequest-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 50.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7.466666666666667, "minX": 1.7115282E12, "maxY": 564017.1333333333, "series": [{"data": [[1.71152826E12, 508280.88333333336], [1.71152832E12, 564017.1333333333], [1.7115282E12, 15135.816666666668], [1.71152838E12, 226672.78333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71152826E12, 192.3], [1.71152832E12, 201.66666666666666], [1.7115282E12, 7.466666666666667], [1.71152838E12, 80.11666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71152838E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3943.5, "minX": 1.7115282E12, "maxY": 23609.386363636357, "series": [{"data": [[1.71152826E12, 17008.67796610169], [1.71152832E12, 15056.30303030303], [1.7115282E12, 3943.5], [1.71152838E12, 5984.0]], "isOverall": false, "label": "homePageHttpRequest", "isController": false}, {"data": [[1.71152826E12, 7814.809523809524], [1.71152832E12, 21599.51851851852], [1.71152838E12, 10476.400000000001]], "isOverall": false, "label": "solutionsHttpRequest", "isController": false}, {"data": [[1.71152826E12, 21563.136363636368], [1.71152832E12, 23609.386363636357], [1.71152838E12, 13702.833333333332]], "isOverall": false, "label": "pricingHttpRequest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71152838E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 824.0, "minX": 1.7115282E12, "maxY": 7883.944444444443, "series": [{"data": [[1.71152826E12, 3466.966101694915], [1.71152832E12, 4965.999999999999], [1.7115282E12, 824.0], [1.71152838E12, 3402.5]], "isOverall": false, "label": "homePageHttpRequest", "isController": false}, {"data": [[1.71152826E12, 2986.1428571428573], [1.71152832E12, 7883.944444444443], [1.71152838E12, 4475.4800000000005]], "isOverall": false, "label": "solutionsHttpRequest", "isController": false}, {"data": [[1.71152826E12, 3930.886363636364], [1.71152832E12, 6677.727272727272], [1.71152838E12, 5467.999999999999]], "isOverall": false, "label": "pricingHttpRequest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71152838E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7115282E12, "maxY": 5636.703703703704, "series": [{"data": [[1.71152826E12, 1404.847457627118], [1.71152832E12, 2798.6363636363635], [1.7115282E12, 364.5], [1.71152838E12, 1530.0]], "isOverall": false, "label": "homePageHttpRequest", "isController": false}, {"data": [[1.71152826E12, 711.4285714285714], [1.71152832E12, 5636.703703703704], [1.71152838E12, 2583.6]], "isOverall": false, "label": "solutionsHttpRequest", "isController": false}, {"data": [[1.71152826E12, 0.0], [1.71152832E12, 1404.2500000000002], [1.71152838E12, 3250.083333333334]], "isOverall": false, "label": "pricingHttpRequest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71152838E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 768.0, "minX": 1.7115282E12, "maxY": 67293.0, "series": [{"data": [[1.71152826E12, 61948.0], [1.71152832E12, 67293.0], [1.7115282E12, 6643.0], [1.71152838E12, 22128.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71152826E12, 36486.30000000002], [1.71152832E12, 33930.4], [1.7115282E12, 6643.0], [1.71152838E12, 20336.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71152826E12, 61934.299999999996], [1.71152832E12, 67243.98], [1.7115282E12, 6643.0], [1.71152838E12, 22128.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71152826E12, 46566.849999999984], [1.71152832E12, 38756.44999999999], [1.7115282E12, 6643.0], [1.71152838E12, 21261.999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71152826E12, 2352.0], [1.71152832E12, 2473.0], [1.7115282E12, 2411.0], [1.71152838E12, 768.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71152826E12, 14164.5], [1.71152832E12, 19206.0], [1.7115282E12, 3360.0], [1.71152838E12, 11731.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71152838E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6989.5, "minX": 1.0, "maxY": 27399.0, "series": [{"data": [[1.0, 14176.5], [2.0, 14191.0], [4.0, 14570.0], [8.0, 17488.0], [5.0, 16413.0], [3.0, 13328.0], [6.0, 24035.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 16772.0], [2.0, 24618.0], [4.0, 6989.5], [5.0, 8556.0], [3.0, 24260.0], [6.0, 27399.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4895.0, "series": [{"data": [[1.0, 2763.5], [2.0, 3918.5], [4.0, 4414.0], [8.0, 2962.5], [5.0, 4699.0], [3.0, 3761.0], [6.0, 4895.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 4349.5], [2.0, 4006.5], [4.0, 0.0], [5.0, 0.0], [3.0, 4600.0], [6.0, 4451.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.7115282E12, "maxY": 1.9833333333333334, "series": [{"data": [[1.71152826E12, 1.9833333333333334], [1.71152832E12, 1.8333333333333333], [1.7115282E12, 0.8666666666666667], [1.71152838E12, 0.31666666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71152838E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7115282E12, "maxY": 1.7, "series": [{"data": [[1.71152826E12, 1.6666666666666667], [1.71152832E12, 1.7], [1.7115282E12, 0.06666666666666667], [1.71152838E12, 0.6666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71152826E12, 0.06666666666666667], [1.71152832E12, 0.2], [1.71152838E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.TruncatedChunkException", "isController": false}, {"data": [[1.71152826E12, 0.13333333333333333], [1.71152832E12, 0.06666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.71152826E12, 0.16666666666666666], [1.71152832E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}, {"data": [[1.71152826E12, 0.03333333333333333], [1.71152832E12, 0.18333333333333332]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71152838E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7115282E12, "maxY": 0.9833333333333333, "series": [{"data": [[1.71152826E12, 0.9833333333333333], [1.71152832E12, 0.43333333333333335], [1.7115282E12, 0.06666666666666667], [1.71152838E12, 0.06666666666666667]], "isOverall": false, "label": "homePageHttpRequest-success", "isController": false}, {"data": [[1.71152826E12, 0.2833333333333333], [1.71152832E12, 0.8], [1.71152838E12, 0.4166666666666667]], "isOverall": false, "label": "solutionsHttpRequest-success", "isController": false}, {"data": [[1.71152826E12, 0.06666666666666667], [1.71152832E12, 0.1]], "isOverall": false, "label": "solutionsHttpRequest-failure", "isController": false}, {"data": [[1.71152832E12, 0.11666666666666667]], "isOverall": false, "label": "homePageHttpRequest-failure", "isController": false}, {"data": [[1.71152826E12, 0.4], [1.71152832E12, 0.4666666666666667], [1.71152838E12, 0.18333333333333332]], "isOverall": false, "label": "pricingHttpRequest-success", "isController": false}, {"data": [[1.71152826E12, 0.3333333333333333], [1.71152832E12, 0.26666666666666666], [1.71152838E12, 0.016666666666666666]], "isOverall": false, "label": "pricingHttpRequest-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71152838E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7115282E12, "maxY": 1.7, "series": [{"data": [[1.71152826E12, 1.6666666666666667], [1.71152832E12, 1.7], [1.7115282E12, 0.06666666666666667], [1.71152838E12, 0.6666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71152826E12, 0.4], [1.71152832E12, 0.48333333333333334], [1.71152838E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71152838E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

